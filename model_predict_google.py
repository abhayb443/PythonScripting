import base64
import io
import os
import json

import requests
import pprint


def container_predict(image_file_path, image_key, port_number=8501):
    """Sends a prediction request to TFServing docker container REST API.

    Args:
        image_file_path: Path to a local image for the prediction request.
        image_key: Your chosen string key to identify the given image.
        port_number: The port number on your device to accept REST API calls.
    Returns:
        The response of the prediction request.
    """

    with io.open(image_file_path, 'rb') as image_file:
        encoded_image = base64.b64encode(image_file.read()).decode('utf-8')

    # The example here only shows prediction with one image. You can extend it
    # to predict with a batch of images indicated by different keys, which can
    # make sure that the responses corresponding to the given image.
    instances = {
        'instances': [
            {'image_bytes': {'b64': str(encoded_image)},
             'key': image_key}
        ]
    }

    # This example shows sending requests in the same server that you start
    # docker containers. If you would like to send requests to other servers,
    # please change localhost to IP of other servers.
    url = 'http://localhost:{}/v1/models/default:predict'.format(port_number)

    response = requests.post(url, data=json.dumps(instances))
    # pprint.pprint(response.json())

    import cv2

    length = 0
    for item in response.json()['predictions']:
        length = len([in_item for in_item in item['detection_scores'] if in_item > 0.2])
        detection_classes_as_text = item['detection_classes_as_text'][0:length]
        detection_boxes = item['detection_boxes'][0:length]

        img = cv2.imread(image_file_path)
        height, width = img.shape[:2]

        for index, res in enumerate(detection_boxes):
            # ymin, xmin, ymax, xmax
            # ac_x, ac_y, ac_x1, ac_y1 = int(res[0] * width), int(res[1] * height), \
            #                            int(res[2] * width), int(res[3] * height)
            # crop_img = img[ac_y:ac_y1, ac_x:ac_x1]

            ymin, xmin, ymax, xmax = int(res[1] * height), int(res[0] * width), \
                                     int(res[3] * height), int(res[2] * width)
            crop_img = img[ymin:ymax, xmin:xmax]

            cv2.imwrite("cropped_{}.jpg".format(detection_classes_as_text[index]), crop_img)


def image_to_bytes(image):
    import io
    from PIL import Image

    im = Image.open(image)
    im_resize = im.resize((500, 500))
    buf = io.BytesIO()
    im_resize.save(buf, format='JPEG')
    byte_im = buf.getvalue()

    return byte_im


if __name__ == "__main__":
    File_dir = os.path.dirname(__file__)
    file_path = os.path.join(File_dir, 'TestData/LOS1381512851748XNJW_POA.jpg')
    image_file_path = file_path
    image_key = 'image'

    container_predict(image_file_path, image_key)
    # print(image_to_bytes(image_file_path))

"""
sudo docker run --rm --name automl_high_accuracy_model_cpu_aadhar -p 8501:8501 -v /home/abhay/Downloads/Cloud Work/Automl/download_dir:/tmp/mounted_model/0001 -t gcr.io/cloud-devrel-public-resources/gcloud-container-1.14.0:latest 

sudo docker run --rm --name automl_high_accuracy_model_cpu_aadhar -p 8501:8501 -v /home/abhay/Downloads/Automl/download_dir:/tmp/mounted_model/0001 -t gcr.io/cloud-devrel-public-resources/gcloud-container-1.14.0:latest

{'predictions': [{'detection_multiclass_scores': [[0.00444662571, 0.000142812729, 0.000368356705, 0.00121319294, 0.00208610296, 0.0163008869, 0.00946733356, 0.00308385491, 0.984794378], [0.000850141048, 0.00116536021, 0.00185054541, 3.22759151e-05, 0.977981687, 0.00543853641, 0.0340410769, 0.0186560452, 0.000541090965], [0.00136357546, 0.00136786699, 0.00318229198, 0.000883430243, 0.00302439928, 0.931038, 0.00167387724, 0.00204360485, 0.00207477808], [0.000876069069, 0.00186431408, 0.925023317, 0.014826864, 0.0191245079, 0.00399014354, 0.000226706266, 0.00458347797, 0.00117385387], [0.0012101233, 0.000700354576, 0.000384122133, 0.641291857, 0.00431418419, 0.00110900402, 0.00311988592, 8.15689564e-05, 0.000138968229], [0.00122690201, 0.00104042888, 0.0104954839, 0.000591635704, 0.00205093622, 0.00179836154, 0.24184677, 0.000404834747, 0.00159347057], [0.001106143, 0.00100377202, 0.00353446603, 0.00011497736, 0.951902, 0.00836294889, 0.108265042, 0.00770017505, 0.000888347626], [0.00113120675, 0.00315707922, 0.00843972, 0.0130908489, 0.0357115567, 0.000251054764, 0.102376699, 0.000925302505, 0.00341928], [0.00105547905, 0.00146520138, 0.00477999449, 0.0670267642, 0.00152996182, 0.000769734383, 0.00160780549, 0.00175735354, 0.00205239654], [0.00641995668, 0.00308561325, 0.00595718622, 0.00359117985, 0.00680038333, 0.0226221085, 0.00803345442, 0.00719502568, 0.0559446216], [0.000591486692, 0.000688105822, 0.00164225698, 2.29477882e-06, 0.00126740336, 0.0470282435, 0.00351050496, 0.000568091869, 0.000190168619], [0.0014936626, 0.000348120928, 0.0421577394, 0.00307863951, 0.00332683325, 0.0007558465, 9.11653042e-05, 0.00211334229, 0.000423103571], [0.000957042, 0.00236949325, 0.00841561, 0.00734370947, 0.0420200229, 0.000384926796, 0.21891588, 0.000516086817, 0.00302493572], [0.0057053268, 0.00549423695, 0.00615376234, 0.00349244475, 0.00110089779, 0.00534370542, 0.0023419857, 0.00383713841, 0.0364574194], [0.0050009191, 0.0133355558, 0.035135746, 0.00588083267, 0.0105811954, 0.00947040319, 0.005361408, 0.0024215579, 0.023273617], [0.00664043427, 0.0036495924, 0.00445401669, 0.0049957633, 0.00576093793, 0.0139541924, 0.0109772682, 0.00376003981, 0.0349259675], [0.00427430868, 0.00808841, 0.00634381175, 0.00118380785, 0.00230398774, 0.0154441893, 0.00223997235, 0.00708186626, 0.0346639752], [0.00468412042, 0.00660660863, 0.0334711075, 0.00583043694, 0.00827556849, 0.00839200616, 0.00742286444, 0.00224140286, 0.00801286101], [0.00629878044, 0.0056681931, 0.0327759087, 0.00330579281, 0.00643953681, 0.00746744871, 0.00223827362, 0.0307530165, 0.00560492277], [0.00515210629, 0.004745543, 0.0312008858, 0.00134328008, 0.00468188524, 0.0086850822, 0.00125569105, 0.0102876127, 0.00604268909], [0.000441789627, 0.000179946423, 0.0309295952, 8.82148743e-05, 0.00121864676, 0.000165700912, 1.37090683e-06, 1.59144402e-05, 0.000115662813], [0.00151780248, 0.00233960152, 0.00027936697, 0.000714570284, 0.0308378339, 0.0016387105, 0.00124788284, 0.000199556351, 0.00124490261], [0.00629878044, 0.0056681931, 0.0327759087, 0.00330579281, 0.00643953681, 0.00746744871, 0.00223827362, 0.0307530165, 0.00560492277], [0.00471037626, 0.00777441263, 0.00641351938, 0.00210115314, 0.00338873267, 0.0302975178, 0.0023894608, 0.0162115097, 0.0246983171], [0.0045247972, 0.004735291, 0.00443282723, 0.00403317809, 0.00153046846, 0.00647971034, 0.00274923444, 0.0037727952, 0.0296553075], [0.00355800986, 0.00334659219, 0.00381612778, 0.00103917718, 0.00033017993, 0.00453138351, 0.000750094652, 0.0111652315, 0.0289523304], [0.00519064069, 0.00371840596, 0.0286343396, 0.00118991733, 0.00454494357, 0.0078073144, 0.00121745467, 0.00885415077, 0.0046903491], [0.0038074255, 0.00564298034, 0.0274141431, 0.00267714262, 0.00829380751, 0.013176918, 0.00554022193, 9.73939896e-05, 0.0256075263], [0.0010368228, 0.00113508105, 0.000945001841, 7.88867474e-05, 0.000997394323, 0.0270032883, 0.000473707914, 0.000759899616, 0.000503867865], [0.0046954155, 0.00779870152, 0.00634032488, 0.00155994296, 0.00297430158, 0.016916573, 0.00266593695, 0.00633785129, 0.0265930891], [0.000817686319, 0.00099131465, 0.00562310219, 0.0263248682, 1.67191029e-05, 0.00145354867, 5.39422035e-05, 0.000608593225, 0.000313401222], [0.00121742487, 0.00140079856, 0.00346913934, 0.0258067548, 0.000587672, 0.000865936279, 0.00294801593, 0.00069591403, 0.001665622], [0.0038074255, 0.00564298034, 0.0274141431, 0.00267714262, 0.00829380751, 0.013176918, 0.00554022193, 9.73939896e-05, 0.0256075263], [0.00471037626, 0.00777441263, 0.00641351938, 0.00210115314, 0.00338873267, 0.0302975178, 0.0023894608, 0.0162115097, 0.0246983171], [0.00540053844, 0.00746944547, 0.0064470768, 0.00220027566, 0.00308969617, 0.0246146023, 0.00244519114, 0.01224944, 0.0161957443], [0.00371363759, 0.0097258091, 0.00505211949, 0.000115394592, 0.000574052334, 0.00282606483, 0.000870376825, 0.00138813257, 0.024171561], [0.0050009191, 0.0133355558, 0.035135746, 0.00588083267, 0.0105811954, 0.00947040319, 0.005361408, 0.0024215579, 0.023273617], [0.00350412726, 0.00432744622, 0.0230907202, 0.00248801708, 0.00601610541, 0.0103401244, 0.00872215629, 0.000101745129, 0.00908038], [0.00641995668, 0.00308561325, 0.00595718622, 0.00359117985, 0.00680038333, 0.0226221085, 0.00803345442, 0.00719502568, 0.0559446216], [0.00092574954, 0.00337132812, 0.00487479568, 0.00253149867, 0.0211986899, 0.00107467175, 0.000811874866, 0.00239291787, 0.000737607479]], 'detection_classes': [8.0, 4.0, 5.0, 2.0, 3.0, 6.0, 6.0, 6.0, 3.0, 8.0, 5.0, 2.0, 4.0, 8.0, 2.0, 8.0, 8.0, 2.0, 2.0, 2.0, 2.0, 4.0, 7.0, 5.0, 8.0, 8.0, 2.0, 2.0, 5.0, 8.0, 3.0, 3.0, 8.0, 8.0, 5.0, 8.0, 8.0, 2.0, 5.0, 4.0], 'num_detections': 40.0, 'image_info': [512, 512, 1, 0, 512, 512], 'detection_boxes': [[0.130229592, 0.00755825639, 0.959364057, 0.965831399], [0.335542887, 0.298484653, 0.387110323, 0.489801735], [0.717033803, 0.309164107, 0.806822, 0.709395587], [0.317552865, 0.0643614158, 0.684356511, 0.302147895], [0.435349405, 0.422757089, 0.487727702, 0.518447], [0.38047266, 0.510850728, 0.439239621, 0.654162943], [0.335333318, 0.296871573, 0.387081593, 0.491122454], [0.376082361, 0.468681574, 0.432644248, 0.634231925], [0.43482706, 0.37936151, 0.485219508, 0.501623452], [0.250968456, 0.0, 0.939557314, 0.562721968], [0.167103037, 0.402137429, 0.234092966, 0.617989063], [0.332846284, 0.136727408, 0.630459964, 0.313601255], [0.376283139, 0.498881817, 0.435019821, 0.66540122], [0.362817466, 0.0, 0.839167655, 0.878664136], [0.36033687, 0.00758977234, 0.82839191, 0.384972334], [0.228423387, 0.385573, 0.926567435, 1.0], [0.706347346, 0.0, 0.946020842, 0.722927928], [0.199412644, 0.0136456192, 0.63535881, 0.40669331], [0.0, 0.0, 0.361073494, 0.357930571], [0.0, 0.348595, 0.431987524, 0.876566768], [0.235382482, 0.0491392314, 0.512787879, 0.316840857], [0.327805936, 0.326050669, 0.399702, 0.469465882], [0.0, 0.0, 0.361073494, 0.357930571], [0.723995388, 0.0, 0.981244147, 0.503280044], [0.205706254, 0.0, 0.679367, 0.864247382], [0.200545251, 0.0774207711, 0.669402719, 1.0], [0.0, 0.14131856, 0.429137975, 0.66146034], [0.278339326, 0.147617251, 0.835726798, 0.711736083], [0.654299676, 0.35132736, 0.743761718, 0.784115], [0.71379292, 0.207881421, 0.955345511, 0.986834526], [0.449180037, 0.428309917, 0.482843071, 0.514685392], [0.430033684, 0.437337637, 0.483527064, 0.549639702], [0.278339326, 0.147617251, 0.835726798, 0.711736083], [0.723995388, 0.0, 0.981244147, 0.503280044], [0.747613, 0.441084623, 0.984519064, 1.0], [0.263767809, 0.156588733, 0.567229867, 1.0], [0.36033687, 0.00758977234, 0.82839191, 0.384972334], [0.173472732, 0.276650071, 0.752455115, 0.852103472], [0.250968456, 0.0, 0.939557314, 0.562721968], [0.367768109, 0.302605599, 0.417924285, 0.528663754]], 'detection_scores': [0.984794378, 0.977981687, 0.931038, 0.925023317, 0.641291857, 0.24184677, 0.108265042, 0.102376699, 0.0670267642, 0.0559446216, 0.0470282435, 0.0421577394, 0.0420200229, 0.0364574194, 0.035135746, 0.0349259675, 0.0346639752, 0.0334711075, 0.0327759087, 0.0312008858, 0.0309295952, 0.0308378339, 0.0307530165, 0.0302975178, 0.0296553075, 0.0289523304, 0.0286343396, 0.0274141431, 0.0270032883, 0.0265930891, 0.0263248682, 0.0258067548, 0.0256075263, 0.0246983171, 0.0246146023, 0.024171561, 0.023273617, 0.0230907202, 0.0226221085, 0.0211986899], 'detection_classes_as_text': ['AadharFront', 'AadharName', 'AadharNumber', 'AadharPhoto', 'AadharGender', 'AadharDOB', 'AadharDOB', 'AadharDOB', 'AadharGender', 'AadharFront', 'AadharNumber', 'AadharPhoto', 'AadharName', 'AadharFront', 'AadharPhoto', 'AadharFront', 'AadharFront', 'AadharPhoto', 'AadharPhoto', 'AadharPhoto', 'AadharPhoto', 'AadharName', 'Address', 'AadharNumber', 'AadharFront', 'AadharFront', 'AadharPhoto', 'AadharPhoto', 'AadharNumber', 'AadharFront', 'AadharGender', 'AadharGender', 'AadharFront', 'AadharFront', 'AadharNumber', 'AadharFront', 'AadharFront', 'AadharPhoto', 'AadharNumber', 'AadharName'], 'key': 'image'}]}
"""
